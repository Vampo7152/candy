{"version":3,"sources":["lib/candy-machine.ts","lib/connection.tsx","test.ts","components/Home/ConnectButton.tsx","components/MintButton/index.tsx","components/Home/MintContainer.tsx","components/MintCountdown/index.tsx","components/Home/CandyMachineInfo.tsx","pages/Home/index.tsx","hooks/useConnectWallet.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/index.tsx","mint.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","mintOneToken","beforeTransactions","afterTransactions","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","collectionPDA","collectionPDAAccount","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","error","instructionsMatrix","signersMatrix","txnEstimate","INIT_INSTRUCTIONS_LENGTH","INIT_SIGNERS_LENGTH","initInstructions","splice","initSigners","sendTransactions","SequenceType","StopOnFailure","txs","t","ms","getErrorForTransaction","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","all","number","result","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","DEFAULT_TIMEOUT","confirmation","Error","getUnixTs","Date","getTime","startTime","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","onSignature","context","e","CANDY_MACHINE_PROGRAM_V2_ID","sendTransactionWithRetryWithKeypair","beforeSend","sign","warn","getTokenWallet","buyer","mintV2","keypair","env","rpcUrl","userKeyPair","loadWalletKey","loadCandyProgramV2","anchorProgram","tokenAccount","debug","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","collectionPdaData","info","mainInstructions","ConnectButton","styled","WalletDialogButton","CTAButton","Button","MintButton","onMint","isMinting","setIsMinting","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","disabled","onClick","network","ACTIVE","findGatewayToken","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","CircularProgress","Container","div","MintContainer","props","setIsUserMinting","setAlertState","isUserMinting","isWhitelistUser","setItemsRemaining","setIsActive","txTimeout","refreshCandyMachineState","isWalletConnected","document","getElementById","click","mintOne","mintTxId","remaining","severity","msg","code","location","reload","indexOf","handleTransaction","clusterUrl","broadcastTransaction","autoShowModal","val","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CandyMachineInfo","discountPrice","setIsPresale","endDate","toggleMintButton","active","now","getCountdownDate","endSettingType","toDate","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","Home","setCandyMachine","alertState","setEndDate","setIsWhitelistUser","setDiscountPrice","rpcHost","useMemo","useCallback","cndy","presale","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","noHide","candyM","rpcUr","inst","marginTop","maxWidth","position","paddingBottom","backgroundColor","connected","Snackbar","autoHideDuration","onClose","Alert","useConnectWallet","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","createTheme","palette","type","process","REACT_APP_SOLANA_NETWORK","REACT_APP_SOLANA_RPC_HOST","Connection","clusterApiUrl","App","wallets","getCandyMachineId","endpoint","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","REACT_APP_CANDY_MACHINE_ID","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","key","secretKey","bs58","decode","fromSecretKey","walletKeyPair","customRpcUrl","solConnection","getCluster","walletWrapper","rpcurl","keypairr","createMintNftInstruction","CandyMachineProgram","ix","feePayer","sendAndConfirmTransaction"],"mappings":"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","file":"static/js/main.255c3266.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from '../utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix: anchor.web3.TransactionInstruction[][] = [];\n  const signersMatrix: anchor.web3.Keypair[][] = [];\n\n  const state = candyMachine.state;\n  const txnEstimate =\n    892 +\n    (collectionPDAAccount && state.retainAuthority ? 182 : 0) +\n    (state.tokenMint ? 177 : 0) +\n    (state.whitelistMintSettings ? 33 : 0) +\n    (state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n    (state.gatekeeper ? 33 : 0) +\n    (state.gatekeeper?.expireOnUse ? 66 : 0);\n\n  const INIT_INSTRUCTIONS_LENGTH = 4;\n  const INIT_SIGNERS_LENGTH = 1;\n\n  console.log('Transaction estimate: ', txnEstimate);\n  if (txnEstimate > 1230) {\n    const initInstructions = instructions.splice(0, INIT_INSTRUCTIONS_LENGTH);\n    console.log(initInstructions);\n    instructionsMatrix.push(initInstructions);\n    const initSigners = signers.splice(0, INIT_SIGNERS_LENGTH);\n    signersMatrix.push(initSigners);\n  }\n\n  instructionsMatrix.push(instructions);\n  signersMatrix.push(signers);\n\n  if (cleanupInstructions.length > 0) {\n    instructionsMatrix.push(cleanupInstructions);\n    signersMatrix.push([]);\n  }\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 30000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {\n    Keypair, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY,\n    TransactionInstruction, Blockhash,\n    Commitment,\n    Connection,\n    FeeCalculator,\n    RpcResponseAndContext,\n    SignatureStatus,\n    SimulatedTransactionResponse,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\n\nimport { MintLayout, Token } from '@solana/spl-token';\nimport log from 'loglevel';\nimport {\n    loadWalletKey,\n    loadCandyProgramV2,\n    CandyMachine,\n    getCandyMachineCreator,\n    getMasterEdition,\n    getMetadata,\n    TOKEN_METADATA_PROGRAM_ID,\n    CANDY_MACHINE_PROGRAM_V2_ID,\n\n} from './mint';\nimport * as anchor from '@project-serum/anchor';\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n    'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\nexport const DEFAULT_TIMEOUT = 30000;\n\nexport const getUnixTs = () => {\n    return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface BlockhashAndFeeCalculator {\n    blockhash: Blockhash;\n    feeCalculator: FeeCalculator;\n}\n\nexport const getCollectionPDA = async (\n    candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n        CANDY_MACHINE_PROGRAM_V2_ID,\n    );\n};\n\n\nexport const sendTransactionWithRetryWithKeypair = async (\n    connection: Connection,\n    wallet: Keypair,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n) => {\n    const transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n        block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n        transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n        transaction.setSigners(\n            // fee payed by the wallet owner\n            wallet.publicKey,\n            ...signers.map(s => s.publicKey),\n        );\n    }\n\n    if (signers.length > 0) {\n        transaction.sign(...[wallet, ...signers]);\n    } else {\n        transaction.sign(wallet);\n    }\n\n    if (beforeSend) {\n        beforeSend();\n    }\n\n    const { txid, slot } = await sendSignedTransaction({\n        connection,\n        signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n};\n\nexport async function sendSignedTransaction({\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT,\n}: {\n    signedTransaction: Transaction;\n    connection: Connection;\n    sendingMessage?: string;\n    sentMessage?: string;\n    successMessage?: string;\n    timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid: TransactionSignature = await connection.sendRawTransaction(\n        rawTransaction,\n        {\n            skipPreflight: true,\n        },\n    );\n\n    console.log('Started awaiting confirmation for', txid);\n\n    let done = false;\n    (async () => {\n        while (!done && getUnixTs() - startTime < timeout) {\n            connection.sendRawTransaction(rawTransaction, {\n                skipPreflight: true,\n            });\n            await sleep(500);\n        }\n    })();\n    try {\n        const confirmation = await awaitTransactionSignatureConfirmation(\n            txid,\n            timeout,\n            connection,\n            'confirmed',\n            true,\n        );\n\n        if (!confirmation)\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n        if (confirmation.err) {\n            console.log(confirmation.err);\n            throw new Error('Transaction failed: Custom instruction error');\n        }\n\n        slot = confirmation?.slot || 0;\n    } catch (err) {\n        console.log('Timeout Error caught', err);\n        if (err) {\n            throw new Error('Timed out awaiting confirmation on transaction');\n        }\n        let simulateResult: SimulatedTransactionResponse | null = null;\n        try {\n            simulateResult = (\n                await simulateTransaction(connection, signedTransaction, 'single')\n            ).value;\n        } catch (e) {\n            console.log('Simulate Transaction error', e);\n        }\n        if (simulateResult && simulateResult.err) {\n            if (simulateResult.logs) {\n                for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n                    const line = simulateResult.logs[i];\n                    if (line.startsWith('Program log: ')) {\n                        throw new Error(\n                            'Transaction failed: ' + line.slice('Program log: '.length),\n                        );\n                    }\n                }\n            }\n            throw new Error(JSON.stringify(simulateResult.err));\n        }\n        console.log('Got this far.');\n        // throw new Error('Transaction failed');\n    } finally {\n        done = true;\n    }\n\n    console.log('Latency (ms)', txid, getUnixTs() - startTime);\n    return { txid, slot };\n}\n\nasync function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n        // @ts-ignore\n        connection._disableBlockhashCaching,\n    );\n\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n\n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n    let done = false;\n    let status: SignatureStatus | null | void = {\n        slot: 0,\n        confirmations: 0,\n        err: null,\n    };\n    let subId = 0;\n    // eslint-disable-next-line no-async-promise-executor\n    status = await new Promise(async (resolve, reject) => {\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            log.warn('Rejecting for timeout...');\n            reject({ timeout: true });\n        }, timeout);\n        try {\n            subId = connection.onSignature(\n                txid,\n                (result, context) => {\n                    done = true;\n                    status = {\n                        err: result.err,\n                        slot: context.slot,\n                        confirmations: 0,\n                    };\n                    if (result.err) {\n                        log.warn('Rejected via websocket', result.err);\n                        reject(status);\n                    } else {\n                        console.log('Resolved via websocket', result);\n                        resolve(status);\n                    }\n                },\n                commitment,\n            );\n        } catch (e) {\n            done = true;\n            log.error('WS error in setup', txid, e);\n        }\n        while (!done && queryStatus) {\n            // eslint-disable-next-line no-loop-func\n            (async () => {\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid,\n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId])\n        connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n    mint: anchor.web3.PublicKey,\n    newAuthority: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [\n            Buffer.from('metadata'),\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n            mint.toBuffer(),\n            Buffer.from('collection_authority'),\n            newAuthority.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID,\n    );\n};\n\nexport const getTokenWallet = async function (\n    wallet: PublicKey,\n    mint: PublicKey,\n) {\n    return (\n        await PublicKey.findProgramAddress(\n            [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport const getAtaForMint = async (\n    mint: anchor.web3.PublicKey,\n    buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n    associatedTokenAddress: PublicKey,\n    payer: PublicKey,\n    walletAddress: PublicKey,\n    splTokenMintAddress: PublicKey,\n) {\n    const keys = [\n        {\n            pubkey: payer,\n            isSigner: true,\n            isWritable: true,\n        },\n        {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: walletAddress,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: splTokenMintAddress,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n}\n\n\nexport async function mintV2(\n    keypair: string,\n    env: string,\n    candyMachineAddress: PublicKey,\n    rpcUrl: string,\n): Promise<string> {\n    const mint = Keypair.generate();\n\n    const userKeyPair = loadWalletKey(keypair);\n    const anchorProgram: any = await loadCandyProgramV2(userKeyPair, env, rpcUrl);\n    const userTokenAccountAddress = await getTokenWallet(\n        userKeyPair.publicKey,\n        mint.publicKey,\n    );\n\n    const candyMachine: CandyMachine = await anchorProgram.account.candyMachine.fetch(candyMachineAddress);\n\n    const remainingAccounts = [];\n    const signers = [mint, userKeyPair];\n    const cleanupInstructions = [];\n    const instructions = [\n        anchor.web3.SystemProgram.createAccount({\n            fromPubkey: userKeyPair.publicKey,\n            newAccountPubkey: mint.publicKey,\n            space: MintLayout.span,\n            lamports:\n                await anchorProgram.provider.connection.getMinimumBalanceForRentExemption(\n                    MintLayout.span,\n                ),\n            programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            0,\n            userKeyPair.publicKey,\n            userKeyPair.publicKey,\n        ),\n        createAssociatedTokenAccountInstruction(\n            userTokenAccountAddress,\n            userKeyPair.publicKey,\n            userKeyPair.publicKey,\n            mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            userTokenAccountAddress,\n            userKeyPair.publicKey,\n            [],\n            1,\n        ),\n    ];\n\n    if (candyMachine.data.whitelistMintSettings) {\n        const mint = new anchor.web3.PublicKey(\n            candyMachine.data.whitelistMintSettings.mint,\n        );\n\n        const whitelistToken = (\n            await getAtaForMint(mint, userKeyPair.publicKey)\n        )[0];\n        remainingAccounts.push({\n            pubkey: whitelistToken,\n            isWritable: true,\n            isSigner: false,\n        });\n\n        if (candyMachine.data.whitelistMintSettings.mode.burnEveryTime) {\n            const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n            remainingAccounts.push({\n                pubkey: mint,\n                isWritable: true,\n                isSigner: false,\n            });\n            remainingAccounts.push({\n                pubkey: whitelistBurnAuthority.publicKey,\n                isWritable: false,\n                isSigner: true,\n            });\n            signers.push(whitelistBurnAuthority);\n            const exists = await anchorProgram.provider.connection.getAccountInfo(\n                whitelistToken,\n            );\n            if (exists) {\n                instructions.push(\n                    Token.createApproveInstruction(\n                        TOKEN_PROGRAM_ID,\n                        whitelistToken,\n                        whitelistBurnAuthority.publicKey,\n                        userKeyPair.publicKey,\n                        [],\n                        1,\n                    ),\n                );\n                cleanupInstructions.push(\n                    Token.createRevokeInstruction(\n                        TOKEN_PROGRAM_ID,\n                        whitelistToken,\n                        userKeyPair.publicKey,\n                        [],\n                    ),\n                );\n            }\n        }\n    }\n\n    let tokenAccount;\n    if (candyMachine.tokenMint) {\n        const transferAuthority = anchor.web3.Keypair.generate();\n\n        tokenAccount = await getTokenWallet(\n            userKeyPair.publicKey,\n            candyMachine.tokenMint,\n        );\n\n        remainingAccounts.push({\n            pubkey: tokenAccount,\n            isWritable: true,\n            isSigner: false,\n        });\n        remainingAccounts.push({\n            pubkey: transferAuthority.publicKey,\n            isWritable: false,\n            isSigner: true,\n        });\n\n        instructions.push(\n            Token.createApproveInstruction(\n                TOKEN_PROGRAM_ID,\n                tokenAccount,\n                transferAuthority.publicKey,\n                userKeyPair.publicKey,\n                [],\n                candyMachine.data.price.toNumber(),\n            ),\n        );\n        signers.push(transferAuthority);\n        cleanupInstructions.push(\n            Token.createRevokeInstruction(\n                TOKEN_PROGRAM_ID,\n                tokenAccount,\n                userKeyPair.publicKey,\n                [],\n            ),\n        );\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    log.debug(\n        'Remaining accounts: ',\n        remainingAccounts.map(i => i.pubkey.toBase58()),\n    );\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n        candyMachineAddress,\n    );\n    instructions.push(\n        await anchorProgram.instruction.mintNft(creatorBump, {\n            accounts: {\n                candyMachine: candyMachineAddress,\n                candyMachineCreator,\n                payer: userKeyPair.publicKey,\n                //@ts-ignore\n                wallet: candyMachine.wallet,\n                mint: mint.publicKey,\n                metadata: metadataAddress,\n                masterEdition,\n                mintAuthority: userKeyPair.publicKey,\n                updateAuthority: userKeyPair.publicKey,\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                tokenProgram: TOKEN_PROGRAM_ID,\n                systemProgram: SystemProgram.programId,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n                recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n                instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            remainingAccounts:\n                remainingAccounts.length > 0 ? remainingAccounts : undefined,\n        }),\n    );\n\n    const collectionPDA = (await getCollectionPDA(candyMachineAddress))[0];\n    const collectionPDAAccount =\n        await anchorProgram.provider.connection.getAccountInfo(collectionPDA);\n\n    if (collectionPDAAccount && candyMachine.data.retainAuthority) {\n        try {\n            const collectionPdaData =\n                (await anchorProgram.account.collectionPda.fetch(collectionPDA)) as {\n                    mint: PublicKey;\n                };\n            const collectionMint = collectionPdaData.mint;\n            const collectionAuthorityRecord = (\n                await getCollectionAuthorityRecordPDA(collectionMint, collectionPDA)\n            )[0];\n\n            if (collectionMint) {\n                const collectionMetadata = await getMetadata(collectionMint);\n                const collectionMasterEdition = await getMasterEdition(collectionMint);\n                log.debug('Collection PDA: ', collectionPDA.toBase58());\n                log.debug('Authority: ', candyMachine.authority.toBase58());\n\n                instructions.push(\n                    await anchorProgram.instruction.setCollectionDuringMint({\n                        accounts: {\n                            candyMachine: candyMachineAddress,\n                            metadata: metadataAddress,\n                            payer: userKeyPair.publicKey,\n                            collectionPda: collectionPDA,\n                            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                            instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n                            collectionMint: collectionMint,\n                            collectionMetadata,\n                            collectionMasterEdition,\n                            authority: candyMachine.authority,\n                            collectionAuthorityRecord,\n                        },\n                    }),\n                );\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    const data = candyMachine.data;\n    const txnEstimate =\n        892 +\n        (collectionPDAAccount && data.retainAuthority ? 182 : 0) +\n        (candyMachine.tokenMint ? 177 : 0) +\n        (data.whitelistMintSettings ? 33 : 0) +\n        (data.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n        (data.gatekeeper ? 33 : 0) +\n        (data.gatekeeper?.expireOnUse ? 66 : 0);\n\n    log.info('Transaction size estimate: ', txnEstimate);\n    const INIT_INSTRUCTIONS_LENGTH = 4;\n    const INIT_SIGNERS_LENGTH = 1;\n    let initInstructions: anchor.web3.TransactionInstruction[] = [];\n    let initSigners: Keypair[] = [];\n\n    if (txnEstimate > 1230) {\n        initInstructions = instructions.splice(0, INIT_INSTRUCTIONS_LENGTH);\n        initSigners = signers.splice(0, INIT_SIGNERS_LENGTH);\n    }\n\n    if (initInstructions.length > 0) {\n        await sendTransactionWithRetryWithKeypair(\n            anchorProgram.provider.connection,\n            userKeyPair,\n            initInstructions,\n            initSigners,\n        );\n    }\n\n    const mainInstructions = (\n        await sendTransactionWithRetryWithKeypair(\n            anchorProgram.provider.connection,\n            userKeyPair,\n            instructions,\n            signers,\n        )\n    ).txid;\n\n    if (cleanupInstructions.length > 0) {\n        await sendTransactionWithRetryWithKeypair(\n            anchorProgram.provider.connection,\n            userKeyPair,\n            cleanupInstructions,\n            [],\n        );\n    }\n\n    return mainInstructions;\n}\n","import styled from 'styled-components';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nexport default ConnectButton;","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from '../../lib/candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import styled from \"styled-components\";\nimport { MintButton } from \"../MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { sendTransaction } from \"../../lib/connection\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  mintOneToken,\n} from \"../../lib/candy-machine\";\nimport * as anchor from \"@project-serum/anchor\";\nconst Container = styled.div``; // add your owns styles here\ninterface Props {\n  candyMachine?: CandyMachineAccount;\n  wallet?: anchor.Wallet;\n  connection: anchor.web3.Connection;\n  rpcUrl: string;\n  itemsRemaining?: number;\n  txTimeout: number;\n  isUserMinting: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistUser: boolean;\n  isWalletConnected: boolean;\n  setIsActive: Function;\n  setIsUserMinting: Function;\n  setAlertState: Function;\n  setItemsRemaining: Function;\n  refreshCandyMachineState: Function;\n}\n\nconst MintContainer = (props: Props) => {\n  const {\n    candyMachine,\n    wallet,\n    rpcUrl,\n    setIsUserMinting,\n    setAlertState,\n    isUserMinting,\n    isActive,\n    isPresale,\n    connection,\n    isWhitelistUser,\n    itemsRemaining,\n    setItemsRemaining,\n    setIsActive,\n    txTimeout,\n    refreshCandyMachineState,\n    isWalletConnected\n  } = props;\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (isWalletConnected && candyMachine?.program && wallet?.publicKey) {\n        let mintOne = await mintOneToken(\n          candyMachine,\n          wallet?.publicKey,\n          beforeTransactions,\n          afterTransactions\n        );\n\n        const mintTxId = mintOne[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            txTimeout,\n            connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet?.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const handleTransaction = async (transaction: Transaction) => {\n    setIsUserMinting(true);\n    const userMustSign = transaction.signatures.find((sig) =>\n      sig.publicKey.equals(wallet?.publicKey!)\n    );\n    if (userMustSign) {\n      setAlertState({\n        open: true,\n        message: \"Please sign one-time Civic Pass issuance\",\n        severity: \"info\",\n      });\n      try {\n        transaction = await (wallet?.signTransaction!(transaction)) as Transaction;\n      } catch (e) {\n        setAlertState({\n          open: true,\n          message: \"User cancelled signing\",\n          severity: \"error\",\n        });\n        // setTimeout(() => window.location.reload(), 2000);\n        setIsUserMinting(false);\n        throw e;\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: \"Refreshing Civic Pass\",\n        severity: \"info\",\n      });\n    }\n    try {\n      await sendTransaction(\n        connection,\n        wallet,\n        transaction,\n        [],\n        true,\n        \"confirmed\"\n      );\n      setAlertState({\n        open: true,\n        message: \"Please sign minting\",\n        severity: \"info\",\n      });\n    } catch (e) {\n      setAlertState({\n        open: true,\n        message: \"Solana dropped the transaction, please try again\",\n        severity: \"warning\",\n      });\n      console.error(e);\n      // setTimeout(() => window.location.reload(), 2000);\n      setIsUserMinting(false);\n      throw e;\n    }\n    await onMint();\n  };\n\n  return (\n    <Container>\n      {candyMachine?.state.isActive &&\n      candyMachine?.state.gatekeeper &&\n      wallet?.publicKey &&\n      wallet?.signTransaction ? (\n        <GatewayProvider\n          wallet={{\n            publicKey: wallet?.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n            //@ts-ignore\n            signTransaction: wallet?.signTransaction,\n          }}\n          gatekeeperNetwork={candyMachine?.state?.gatekeeper?.gatekeeperNetwork}\n          clusterUrl={rpcUrl}\n          handleTransaction={(transaction: Transaction) =>\n            handleTransaction(transaction)\n          }\n          broadcastTransaction={false}\n          options={{ autoShowModal: false }}\n        >\n          <MintButton\n            candyMachine={candyMachine}\n            isMinting={isUserMinting}\n            setIsMinting={(val) => setIsUserMinting(val)}\n            onMint={onMint}\n            isActive={isActive || (isPresale && isWhitelistUser)}\n          />\n        </GatewayProvider>\n      ) : (\n        <MintButton\n          candyMachine={candyMachine}\n          isMinting={isUserMinting}\n          setIsMinting={(val) => setIsUserMinting(val)}\n          onMint={onMint}\n          isActive={isActive || (isPresale && isWhitelistUser)}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default MintContainer;\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { toDate, formatNumber } from \"../../utils\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { CandyMachineAccount } from \"../../lib/candy-machine\";\nimport {MintCountdown} from '../MintCountdown';\ninterface Props {\n    candyMachine?: CandyMachineAccount;\n    discountPrice?:anchor.BN;\n    itemsRemaining?: number;\n    endDate?: Date;\n    isWhitelistUser: boolean;\n    isActive: boolean;\n    isPresale: boolean;\n    setIsActive: Function;\n    setIsPresale: Function;\n}\nconst CandyMachineInfo = (props: Props) => {\n  const {\n    candyMachine,\n    itemsRemaining,\n    isWhitelistUser,\n    discountPrice,\n    isActive,\n    isPresale,\n    setIsActive,\n    setIsPresale,\n    endDate,\n  } = props;\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n  const getCountdownDate = (\n    candyMachine: CandyMachineAccount\n  ): Date | undefined => {\n    if (\n      candyMachine.state.isActive &&\n      candyMachine.state.endSettings?.endSettingType.date\n    ) {\n      return toDate(candyMachine.state.endSettings.number);\n    }\n\n    return toDate(\n      candyMachine.state.goLiveDate\n        ? candyMachine.state.goLiveDate\n        : candyMachine.state.isPresale\n        ? new anchor.BN(new Date().getTime() / 1000)\n        : undefined\n    );\n  };\n  return (\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\n      <Grid item xs={3}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Remaining\n        </Typography>\n        <Typography\n          variant=\"h6\"\n          color=\"textPrimary\"\n          style={{\n            fontWeight: \"bold\",\n          }}\n        >\n          {`${itemsRemaining}`}\n        </Typography>\n      </Grid>\n      <Grid item xs={4}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {isWhitelistUser && discountPrice ? \"Discount Price\" : \"Price\"}\n        </Typography>\n        <Typography\n          variant=\"h6\"\n          color=\"textPrimary\"\n          style={{ fontWeight: \"bold\" }}\n        >\n          {isWhitelistUser && discountPrice\n            ? `◎ ${formatNumber.asNumber(discountPrice)}`\n            : `◎ ${formatNumber.asNumber(candyMachine?.state.price)}`}\n        </Typography>\n      </Grid>\n      <Grid item xs={5}>\n        {isActive && endDate && Date.now() < endDate.getTime() ? (\n          <>\n            <MintCountdown\n              key=\"endSettings\"\n              date={getCountdownDate((candyMachine) as CandyMachineAccount)}\n              style={{ justifyContent: \"flex-end\" }}\n              status=\"COMPLETED\"\n              onComplete={toggleMintButton}\n            />\n            <Typography\n              variant=\"caption\"\n              align=\"center\"\n              display=\"block\"\n              style={{ fontWeight: \"bold\" }}\n            >\n              TO END OF MINT\n            </Typography>\n          </>\n        ) : (\n          <>\n            <MintCountdown\n              key=\"goLive\"\n              date={getCountdownDate((candyMachine) as CandyMachineAccount)}\n              style={{ justifyContent: \"flex-end\" }}\n              status={\n                candyMachine?.state?.isSoldOut ||\n                (endDate && Date.now() > endDate.getTime())\n                  ? \"COMPLETED\"\n                  : isPresale\n                  ? \"PRESALE\"\n                  : \"LIVE\"\n              }\n              onComplete={toggleMintButton}\n            />\n            {isPresale &&\n              candyMachine?.state.goLiveDate &&\n              candyMachine?.state.goLiveDate.toNumber() >\n                new Date().getTime() / 1000 && (\n                <Typography\n                  variant=\"caption\"\n                  align=\"center\"\n                  display=\"block\"\n                  style={{ fontWeight: \"bold\" }}\n                >\n                  UNTIL PUBLIC MINT\n                </Typography>\n              )}\n          </>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default CandyMachineInfo;\n","import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { CandyMachineAccount, getCandyMachineState } from \"../../lib/candy-machine\";\nimport { AlertState, toDate, formatNumber, getAtaForMint } from \"../../utils\";\nimport ConnectButton from \"../../components/Home/ConnectButton\";\nimport MintContainer from \"../../components/Home/MintContainer\";\nimport CandyMachineInfo from \"../../components/Home/CandyMachineInfo\";\nimport {mintOne} from '../../mint';\nimport {mintV2} from '../../test';\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: \"error\",\n              noHide: true,\n            });\n          } else if (e.message.startsWith(\"failed to get info about account\")) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: \"error\",\n              noHide: true,\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: \"error\",\n            noHide: true,\n          });\n        }\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: \"error\",\n        noHide: true,\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection, props.rpcHost]);\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  const payer = new anchor.web3.PublicKey('4Bxkgsf8xC5pxS8jYKmpjcFt7vaCYcaKsnXEWgPMbNMG');\n  const candyM = new anchor.web3.PublicKey('5jZnZE3o2L2Hv4bjJEDapErBDfgb7g9JS4hFKgyxNi5c');\n  const env = 'devnet';\n  const rpcUr = props.rpcHost;\n  const keypair = ''; //keypair here \n\nasync function instr() {\n  const inst = mintV2(keypair, env, candyM, rpcUr);\n  console.log(\"Success! \", inst[0])\n}\nasync function minter() {\n  const inst = mintOne(candyM, payer, env, rpcUr, keypair);\n  console.log(inst);\n}\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#151A1F\",\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <CandyMachineInfo\n                  candyMachine={candyMachine}\n                  itemsRemaining={itemsRemaining}\n                  isWhitelistUser={isWhitelistUser}\n                  discountPrice={discountPrice}\n                  isActive={isActive}\n                  isPresale={isPresale}\n                  setIsActive={setIsActive}\n                  setIsPresale={setIsPresale}\n                  endDate={endDate}\n                />\n              )}\n              <MintContainer\n                candyMachine={candyMachine}\n                wallet={anchorWallet}\n                rpcUrl={rpcUrl}\n                setIsUserMinting={setIsUserMinting}\n                setAlertState={setAlertState}\n                isUserMinting={isUserMinting}\n                isActive={isActive}\n                isPresale={isPresale}\n                connection={props.connection}\n                isWhitelistUser={isWhitelistUser}\n                itemsRemaining={itemsRemaining}\n                setItemsRemaining={setItemsRemaining}\n                setIsActive={setIsActive}\n                txTimeout={props.txTimeout}\n                refreshCandyMachineState={refreshCandyMachineState}\n                isWalletConnected={wallet?.connected}\n              />\n            </>\n          )}\n          <button onClick={instr}>Mint Now! 2</button>\n          <button onClick={minter}>Mint Now!</button> \n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={alertState.noHide ? null : 6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default Home;\n","import { useMemo } from \"react\";\n\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nexport interface Props {\n  network: WalletAdapterNetwork;\n}\n\nconst useConnectWallet = (props: Props) => {\n  const network = props.network;\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n  return wallets;\n};\n\nexport default useConnectWallet;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./pages/Home\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getCandyMachineId } from \"./utils\";\nimport useConnectWallet from \"./hooks/useConnectWallet\";\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl(\"devnet\")\n);\n\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const wallets = useConnectWallet({ network });\n  const candyMachineId = getCandyMachineId();\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={txTimeoutInMilliseconds}\n              rpcHost={rpcHost}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js'; \n\n\n\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  noHide?: boolean;\n}\n\nexport const getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n    try {\n      const candyMachineId = new anchor.web3.PublicKey(\n        process.env.REACT_APP_CANDY_MACHINE_ID!\n      );\n  \n      return candyMachineId;\n    } catch (e) {\n      console.log(\"Failed to construct CandyMachineId\", e);\n      return undefined;\n    }\n  };\n  \n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\n\n","import { CandyMachineProgram } from '@metaplex-foundation/mpl-candy-machine';\nimport * as web3 from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { Buffer } from \"buffer\";\nimport {\n  Connection,\n  Transaction,\n  SystemProgram,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport bs58 from 'bs58';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\nexport  const CANDY_MACHINE_PROGRAM_V2_ID = new PublicKey(\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n  );\n\ninterface CandyMachineAccount {\n    id: anchor.web3.PublicKey;\n    program: anchor.Program;\n    state: CandyMachineState;\n}\n\nexport interface CandyMachine {\n    authority: anchor.web3.PublicKey;\n    wallet: anchor.web3.PublicKey;\n    tokenMint: null | anchor.web3.PublicKey;\n    itemsRedeemed: anchor.BN;\n    data: CandyMachineData;\n  }\n\n interface CandyMachineData {\n    itemsAvailable: anchor.BN;\n    uuid: null | string;\n    symbol: string;\n    sellerFeeBasisPoints: number;\n    isMutable: boolean;\n    maxSupply: anchor.BN;\n    price: anchor.BN;\n    retainAuthority: boolean;\n    gatekeeper: null | {\n      expireOnUse: boolean;\n      gatekeeperNetwork: web3.PublicKey;\n    };\n    goLiveDate: null | anchor.BN;\n    endSettings: null | [number, anchor.BN];\n    whitelistMintSettings: null | {\n      mode: WhitelistMintMode;\n      mint: anchor.web3.PublicKey;\n      presale: boolean;\n      discountPrice: null | anchor.BN;\n    };\n    hiddenSettings: null | {\n      name: string;\n      uri: string;\n      hash: Uint8Array;\n    };\n    creators: {\n      address: PublicKey;\n      verified: boolean;\n      share: number;\n    }[];\n  }\n\n interface WhitelistMintMode {\n    neverBurn: undefined | boolean;\n    burnEveryTime: undefined | boolean;\n  }\n\ninterface CandyMachineState {\n    authority: anchor.web3.PublicKey;\n    itemsAvailable: number;\n    itemsRedeemed: number;\n    itemsRemaining: number;\n    treasury: anchor.web3.PublicKey;\n    tokenMint: anchor.web3.PublicKey;\n    isSoldOut: boolean;\n    isActive: boolean;\n    isPresale: boolean;\n    isWhitelistOnly: boolean;\n    goLiveDate: anchor.BN;\n    price: anchor.BN;\n    gatekeeper: null | {\n        expireOnUse: boolean;\n        gatekeeperNetwork: anchor.web3.PublicKey;\n    };\n    endSettings: null | {\n        number: anchor.BN;\n        endSettingType: any;\n    };\n    whitelistMintSettings: null | {\n        mode: any;\n        mint: anchor.web3.PublicKey;\n        presale: boolean;\n        discountPrice: null | anchor.BN;\n    };\n    hiddenSettings: null | {\n        name: string;\n        uri: string;\n        hash: Uint8Array;\n    };\n    retainAuthority: boolean;\n}\n\ntype MintNftInstructionArgs = {\n    creatorBump: number;\n};\ntype MintNftInstructionAccounts = {\n    candyMachine: web3.PublicKey;\n    candyMachineCreator: web3.PublicKey;\n    payer: web3.PublicKey;\n    wallet: web3.PublicKey;\n    metadata: web3.PublicKey;\n    mint: web3.PublicKey;\n    mintAuthority: web3.PublicKey;\n    updateAuthority: web3.PublicKey;\n    masterEdition: web3.PublicKey;\n    tokenMetadataProgram: web3.PublicKey;\n    clock: web3.PublicKey;\n    recentBlockhashes: web3.PublicKey;\n    instructionSysvarAccount: web3.PublicKey;\n};\n\n\nexport const getCandyMachineCreator = async (\n    candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n        CANDY_MACHINE_PROGRAM,\n    );\n};\n\nexport const getMasterEdition = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from('edition'),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport const getCandyMachineState = async (\n    anchorWallet: anchor.Wallet,\n    candyMachineId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n    const provider = new anchor.Provider(connection, anchorWallet, {\n        preflightCommitment: 'processed',\n    });\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n    return {\n        id: candyMachineId,\n        program,\n        state: {\n            authority: state.authority,\n            itemsAvailable,\n            itemsRedeemed,\n            itemsRemaining,\n            isSoldOut: itemsRemaining === 0,\n            isActive: false,\n            isPresale: false,\n            isWhitelistOnly: false,\n            goLiveDate: state.data.goLiveDate,\n            treasury: state.wallet,\n            tokenMint: state.tokenMint,\n            gatekeeper: state.data.gatekeeper,\n            endSettings: state.data.endSettings,\n            whitelistMintSettings: state.data.whitelistMintSettings,\n            hiddenSettings: state.data.hiddenSettings,\n            price: state.data.price,\n            retainAuthority: state.data.retainAuthority,\n        },\n    };\n};\n\nexport const getMetadata = async (\n    mint: anchor.web3.PublicKey,\n\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport function loadWalletKey(keypair : string): Keypair {\n    if (!keypair) {\n        throw new Error('Keypair is required!');\n    }\n    const key: string =\n      keypair; //private key of payer address\n    const buf = bs58.decode(key);\n    const secretKey: Uint8Array = buf;\n    \n    const loaded = Keypair.fromSecretKey(secretKey)\n    return loaded\n}\n\n export async function loadCandyProgramV2(\n    walletKeyPair: Keypair,\n    env: string,\n    customRpcUrl?: string,\n  ) {\n    if (customRpcUrl) console.log('USING CUSTOM URL', customRpcUrl);\n  \n    // @ts-ignore\n    const solConnection = new anchor.web3.Connection(\n      //@ts-ignore\n      customRpcUrl || getCluster(env),\n    );\n  \n    const walletWrapper = new anchor.Wallet(walletKeyPair);\n    const provider = new anchor.Provider(solConnection, walletWrapper, {\n      preflightCommitment: 'recent',\n    });\n    const idl = await anchor.Program.fetchIdl(\n      CANDY_MACHINE_PROGRAM_V2_ID,\n      provider,\n    );\n    if (!idl) return;\n    const program = new anchor.Program(\n      idl,\n      CANDY_MACHINE_PROGRAM_V2_ID,\n      provider,\n    );\n    console.log('program id from anchor', program.programId.toBase58());\n    return program;\n  }\n\n\n\nexport async function mintOne(\n    candyMachineId: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    env: string,\n    rpcurl: string,\n    keypairr: string,\n) {\n    const { createMintNftInstruction } = CandyMachineProgram.instructions;\n\n    const userKeyPair = loadWalletKey(keypairr);\n    const anchorProgram: any = await loadCandyProgramV2(userKeyPair, env, rpcurl);\n    const candyMachine: CandyMachine = await anchorProgram.account.candyMachine.fetch(candyMachineId);\n\n\n    const mint = anchor.web3.Keypair.generate();\n\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n        candyMachineId,\n    );\n\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n\n    const accounts: MintNftInstructionAccounts = {\n        candyMachine: candyMachineId,\n        candyMachineCreator,\n        payer,\n        wallet: candyMachine.wallet, \n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n    };\n\n    const args: MintNftInstructionArgs = {\n        creatorBump\n    };\n\n    const ix = createMintNftInstruction(accounts, args);\n\n    console.log(ix)\n\n    const network = 'https://psytrbhymqlkfrhudd.dev.genesysgo.net:8899/';\n    const connection = new Connection(network);\n    const transaction = new Transaction().add(ix);\n\n    const { blockhash } = await connection.getRecentBlockhash();\n    transaction.recentBlockhash = blockhash;\n    transaction.feePayer = new PublicKey(payer);\n\n      if (transaction) {\n        try {\n          console.log(\"Doing transaction\");\n          const confirmation = await sendAndConfirmTransaction(\n            connection,\n            transaction,\n            [userKeyPair]\n          );\n          console.log(`https://solscan.io/tx/${confirmation}?cluster=devnet`);\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log(\"No Transaction found!\");\n      }\n\n}"],"sourceRoot":""}